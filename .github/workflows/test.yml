name: Integration Tests

on:
  # Run comprehensive tests only on PRs to avoid redundant testing
  # Smoke tests run in build-and-push.yml after images are built
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./docker/Dockerfile

      - name: Lint shell scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -type f -exec shellcheck {} \;

  build-test-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,suffix=-test
            type=ref,event=pr,suffix=-test
            type=raw,value=test

      - name: Build and push test image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          # Only push if not a PR (to avoid cluttering registry with PR test images)
          push: ${{ github.event_name != 'pull_request' }}
          # For PRs, just load the image locally
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=test
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Export to local Docker daemon for PR testing
          outputs: ${{ github.event_name == 'pull_request' && 'type=docker' || '' }}

  integration-tests:
    needs: [lint, build-test-image]
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        test-scenario:
          - name: "password-auth"
            host_port: 2221
            env_vars: |
              SSH_USER=testuser
              SSH_PASSWORD=secure123
              SSH_PERMIT_PASSWORD_AUTH=yes
              SSH_PERMIT_PUBKEY_AUTH=no
              SSH_DEBUG_LEVEL=1
          - name: "pubkey-auth"
            host_port: 2222
            env_vars: |
              SSH_USER=keyuser
              SSH_AUTHORIZED_KEYS=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7... test@example.com
              SSH_PERMIT_PASSWORD_AUTH=no
              SSH_PERMIT_PUBKEY_AUTH=yes
              SSH_DEBUG_LEVEL=1
          - name: "custom-port"
            host_port: 2223
            env_vars: |
              SSH_USER=porttest
              SSH_PASSWORD=test456
              SSH_PORT=2224
              SSH_PERMIT_PASSWORD_AUTH=yes
              SSH_DEBUG_LEVEL=2
          - name: "debug-mode"
            host_port: 2227
            env_vars: |
              SSH_USER=debuguser
              SSH_PASSWORD=debug789
              SSH_DEBUG_LEVEL=3
              SSH_PERMIT_PASSWORD_AUTH=yes
          - name: "minimal-config"
            host_port: 2225
            env_vars: |
              SSH_USER=minuser
              SSH_PASSWORD=minpass
          - name: "security-hardened"
            host_port: 2228
            env_vars: |
              SSH_USER=secureuser
              SSH_PASSWORD=securepass
              SSH_PERMIT_ROOT_LOGIN=no
              SSH_PERMIT_EMPTY_PASSWORDS=no
              SSH_MAX_AUTH_TRIES=3
              SSH_LOGIN_GRACE_TIME=60
              SSH_USE_DNS=no
              SSH_X11_FORWARDING=no
              SSH_AGENT_FORWARDING=no
              SSH_TCP_FORWARDING=no

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Pull or use local test image
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Using locally built image for PR testing"
            docker tag ghcr.io/${{ github.repository }}:test ghcr.io/${{ github.repository }}:test || true
          else
            echo "Pulling test image from registry"
            docker pull ghcr.io/${{ github.repository }}:test
          fi

      - name: Generate SSH key pair for testing
        run: |
          ssh-keygen -t rsa -b 2048 -f test_key -N ""
          echo "Generated SSH key pair for testing"
          echo "Public key:"
          cat test_key.pub

      - name: Prepare environment variables
        run: |
          # Create env file for this test scenario
          cat > test.env << 'EOF'
          ${{ matrix.test-scenario.env_vars }}
          EOF
          
          # Replace placeholder SSH key with real one if needed
          if grep -q "SSH_AUTHORIZED_KEYS.*test@example.com" test.env; then
            echo "üîë Replacing placeholder SSH key with generated key..."
            GENERATED_KEY=$(cat test_key.pub)
            echo "Generated key: $GENERATED_KEY"
            
            # Use grep to remove the placeholder line and append the real key
            # This avoids sed issues with special characters in SSH keys
            grep -v "SSH_AUTHORIZED_KEYS" test.env > test.env.tmp
            echo "SSH_AUTHORIZED_KEYS=$GENERATED_KEY" >> test.env.tmp
            mv test.env.tmp test.env
            
            echo "‚úÖ SSH key replacement completed"
            echo "Updated SSH_AUTHORIZED_KEYS line:"
            grep "SSH_AUTHORIZED_KEYS" test.env || echo "No SSH_AUTHORIZED_KEYS found!"
          else
            echo "No SSH key placeholder found to replace"
          fi
          
          echo "=== Debug: Environment variables for ${{ matrix.test-scenario.name }} ==="
          echo "File contents:"
          cat -n test.env
          echo ""
          echo "File size: $(wc -l < test.env) lines"
          echo "Non-empty lines: $(grep -v '^$' test.env | wc -l)"
          echo "Variables starting with SSH_: $(grep '^SSH_' test.env | wc -l)"
          if grep -q "SSH_AUTHORIZED_KEYS" test.env; then
            echo "SSH_AUTHORIZED_KEYS found: ‚úÖ"
          else
            echo "SSH_AUTHORIZED_KEYS found: ‚ùå"
          fi
          echo "=== End Debug ==="

      - name: Start SSH test server
        run: |
          # Get SSH port from environment (default to 22)
          SSH_PORT=$(grep SSH_PORT test.env | cut -d= -f2 2>/dev/null || echo "")
          if [ -z "$SSH_PORT" ]; then
            SSH_PORT=22
          fi
          echo "Container SSH port: $SSH_PORT"
          echo "Host port: ${{ matrix.test-scenario.host_port }}"
          
          # Check if image exists locally
          echo "Checking for image ghcr.io/${{ github.repository }}:test..."
          docker images | grep "${{ github.repository }}" || echo "Image not found locally"
          
          # Try to start container with environment variables
          echo "Starting container ssh-test-${{ matrix.test-scenario.name }}..."
          echo "Command: docker run -d --name ssh-test-${{ matrix.test-scenario.name }} --env-file test.env -p ${{ matrix.test-scenario.host_port }}:${SSH_PORT} ghcr.io/${{ github.repository }}:test"
          
          # Run the command and capture output
          CONTAINER_ID=$(docker run -d --name ssh-test-${{ matrix.test-scenario.name }} \
            --env-file test.env \
            -p ${{ matrix.test-scenario.host_port }}:${SSH_PORT} \
            ghcr.io/${{ github.repository }}:test 2>&1)
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Container started with ID: $CONTAINER_ID"
          else
            echo "‚ùå Failed to start container"
            echo "Docker output: $CONTAINER_ID"
            echo "Checking docker daemon logs..."
            docker system events --since 1m --until now | tail -10 || true
            exit 1
          fi
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 10
          
          # Check if container is running
          echo "Container status:"
          docker ps -a | grep ssh-test-${{ matrix.test-scenario.name }} || echo "Container not found in docker ps"
          
          # Show container logs immediately
          echo "=== Container Startup Logs ==="
          docker logs ssh-test-${{ matrix.test-scenario.name }} 2>&1 || echo "Could not get container logs"
          
          # Verify container is actually running
          if ! docker ps | grep ssh-test-${{ matrix.test-scenario.name }}; then
            echo "‚ùå Container failed to start properly"
            echo "Container inspect:"
            docker inspect ssh-test-${{ matrix.test-scenario.name }} || true
            exit 1
          fi
          
          echo "‚úÖ Container started successfully"

      - name: Test SSH connectivity
        run: |
          # Test basic connectivity
          echo "Testing connectivity on port ${{ matrix.test-scenario.host_port }}..."
          timeout 10s nc -zv localhost ${{ matrix.test-scenario.host_port }} || exit 1
          
          echo "‚úÖ SSH port is accessible"

      - name: Test SSH authentication
        run: |
          SSH_USER=$(grep SSH_USER test.env | cut -d= -f2)
          SSH_PASSWORD=$(grep SSH_PASSWORD test.env | cut -d= -f2)
          
          if [[ -n "$SSH_PASSWORD" ]]; then
            # Test password authentication
            echo "Testing password authentication on port ${{ matrix.test-scenario.host_port }}..."
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -p ${{ matrix.test-scenario.host_port }} "$SSH_USER@localhost" "echo 'Password auth successful'" || exit 1
            echo "‚úÖ Password authentication works"
          fi
          
          if grep -q "SSH_AUTHORIZED_KEYS" test.env && grep -q "SSH_PERMIT_PUBKEY_AUTH=yes" test.env; then
            # Test key-based authentication
            echo "üîë Testing public key authentication on port ${{ matrix.test-scenario.host_port }}..."
            echo "SSH_USER: $SSH_USER"
            echo "Using private key: test_key"
            echo "Public key fingerprint:"
            ssh-keygen -lf test_key.pub
            echo "Container authorized key:"
            grep "SSH_AUTHORIZED_KEYS" test.env
            echo ""
            echo "Attempting SSH connection..."
            
            # Add more verbose SSH debugging
            ssh -vvv -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -o PasswordAuthentication=no -o IdentitiesOnly=yes -i test_key \
              -p ${{ matrix.test-scenario.host_port }} "$SSH_USER@localhost" "echo 'Key auth successful'" || {
              echo "‚ùå SSH key authentication failed"
              echo ""
              echo "=== Container debugging ==="
              echo "Checking authorized_keys file in container:"
              docker exec ssh-test-${{ matrix.test-scenario.name }} sh -c "
                echo 'User home directory contents:'
                ls -la /home/$SSH_USER/
                echo ''
                echo '.ssh directory contents:'
                ls -la /home/$SSH_USER/.ssh/ 2>/dev/null || echo '.ssh directory does not exist'
                echo ''
                echo 'authorized_keys file contents:'
                cat /home/$SSH_USER/.ssh/authorized_keys 2>/dev/null || echo 'authorized_keys file does not exist'
                echo ''
                echo 'authorized_keys file permissions:'
                ls -la /home/$SSH_USER/.ssh/authorized_keys 2>/dev/null || echo 'authorized_keys file does not exist'
                echo ''
                echo 'User ownership:'
                id $SSH_USER
                echo 'File ownership:'
                ls -la /home/$SSH_USER/.ssh/ 2>/dev/null | head -5
                echo ''
                echo 'SSH daemon configuration:'
                grep -E '(PubkeyAuthentication|AuthorizedKeysFile|StrictModes|LogLevel)' /etc/ssh/sshd_config
                echo ''
                echo 'SSH daemon process:'
                ps aux | grep sshd | grep -v grep
              "
              echo ""
              echo "Recent container logs:"
              docker logs ssh-test-${{ matrix.test-scenario.name }} | tail -20
              exit 1
            }
            echo "‚úÖ Public key authentication works"
          fi

      - name: Test SSH functionality
        run: |
          SSH_USER=$(grep SSH_USER test.env | cut -d= -f2)
          SSH_PASSWORD=$(grep SSH_PASSWORD test.env | cut -d= -f2)
          
          if [[ -n "$SSH_PASSWORD" ]]; then
            # Test basic commands
            echo "Testing basic SSH commands on port ${{ matrix.test-scenario.host_port }}..."
            
            # Test whoami
            RESULT=$(sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -p ${{ matrix.test-scenario.host_port }} "$SSH_USER@localhost" "whoami")
            [[ "$RESULT" == "$SSH_USER" ]] || exit 1
            
            # Test pwd
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -p ${{ matrix.test-scenario.host_port }} "$SSH_USER@localhost" "pwd" | grep -q "/home/$SSH_USER" || exit 1
            
            # Test environment
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -p ${{ matrix.test-scenario.host_port }} "$SSH_USER@localhost" "env | grep USER | grep $SSH_USER" || exit 1
            
            echo "‚úÖ SSH commands work correctly"
          fi

      - name: Test SSH server configuration
        run: |
          # Check SSH daemon process
          docker exec ssh-test-${{ matrix.test-scenario.name }} ps aux | grep sshd | grep -v grep || exit 1
          
          # Check SSH configuration
          docker exec ssh-test-${{ matrix.test-scenario.name }} cat /etc/ssh/sshd_config
          
          # Validate SSH configuration
          docker exec ssh-test-${{ matrix.test-scenario.name }} /usr/sbin/sshd -t || exit 1
          
          echo "‚úÖ SSH server configuration is valid"

      - name: Show container logs
        if: always()
        run: |
          echo "=== Container Logs ==="
          docker logs ssh-test-${{ matrix.test-scenario.name }}

      - name: Cleanup
        if: always()
        run: |
          docker stop ssh-test-${{ matrix.test-scenario.name }} || true
          docker rm ssh-test-${{ matrix.test-scenario.name }} || true

  performance-test:
    needs: [build-test-image]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Pull or use local test image
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Using locally built image for PR testing"
            docker tag ghcr.io/${{ github.repository }}:test ghcr.io/${{ github.repository }}:test || true
          else
            echo "Pulling test image from registry"
            docker pull ghcr.io/${{ github.repository }}:test
          fi

      - name: Performance test
        run: |
          # Start SSH server
          docker run -d --name ssh-perf-test \
            -e SSH_USER=perfuser \
            -e SSH_PASSWORD=perfpass \
            -e SSH_DEBUG_LEVEL=0 \
            -p 2229:22 \
            ghcr.io/${{ github.repository }}:test
          
          sleep 5
          
          # Install sshpass for testing
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Connection time test
          start_time=$(date +%s%N)
          sshpass -p "perfpass" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            -p 2229 perfuser@localhost "exit"
          end_time=$(date +%s%N)
          
          connection_time=$(((end_time - start_time) / 1000000))
          echo "Connection time: ${connection_time}ms"
          
          # Connection should be under 2 seconds
          [[ $connection_time -lt 2000 ]] || exit 1
          
          # Concurrent connections test
          echo "Testing concurrent connections..."
          for i in {1..5}; do
            sshpass -p "perfpass" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -p 2229 perfuser@localhost "sleep 1 && echo 'Connection $i'" &
          done
          
          wait
          echo "‚úÖ Concurrent connections test passed"
          
          # Cleanup
          docker stop ssh-perf-test
          docker rm ssh-perf-test

  security-test:
    needs: [build-test-image]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Pull or use local test image
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Using locally built image for PR testing"
            docker tag ghcr.io/${{ github.repository }}:test ghcr.io/${{ github.repository }}:test || true
          else
            echo "Pulling test image from registry"
            docker pull ghcr.io/${{ github.repository }}:test
          fi

      - name: Security configuration test
        run: |
          # Start SSH server with security settings
          docker run -d --name ssh-security-test \
            -e SSH_USER=secuser \
            -e SSH_PASSWORD=secpass \
            -e SSH_PERMIT_ROOT_LOGIN=no \
            -e SSH_PERMIT_EMPTY_PASSWORDS=no \
            -e SSH_MAX_AUTH_TRIES=2 \
            -e SSH_USE_DNS=no \
            -e SSH_X11_FORWARDING=no \
            -e SSH_AGENT_FORWARDING=no \
            -e SSH_TCP_FORWARDING=no \
            -p 2230:22 \
            ghcr.io/${{ github.repository }}:test
          
          sleep 5
          
          # Test that root login is denied
          echo "Testing root login denial..."
          if sshpass -p "secpass" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
             -p 2230 root@localhost "exit" 2>/dev/null; then
            echo "‚ùå Root login should be denied"
            exit 1
          fi
          echo "‚úÖ Root login correctly denied"
          
          # Test max auth tries (should fail after 2 attempts)
          echo "Testing max auth tries..."
          if sshpass -p "wrongpass" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
             -o NumberOfPasswordPrompts=3 -p 2230 secuser@localhost "exit" 2>/dev/null; then
            echo "‚ùå Should fail after max auth tries"
            exit 1
          fi
          echo "‚úÖ Max auth tries enforced"
          
          # Cleanup
          docker stop ssh-security-test
          docker rm ssh-security-test

  summary:
    needs: [integration-tests, performance-test, security-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Category | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.integration-tests.result }}" == "success" ]] && \
             [[ "${{ needs.performance-test.result }}" == "success" ]] && \
             [[ "${{ needs.security-test.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Some tests failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi